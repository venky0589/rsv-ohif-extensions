import { getFrameOfReference } from './collectViewPortInformation';
import getAnnotation from './getAnnoation';
import { id } from './id';
const data = [
    {
        "type": "ellipse",
        "id": "annotation1",
        "frameOfReferenceUID": "1.3.6.1.4.1.14519.5.2.1.3023.4024.231311529795221040217906484458",
        "sopInstanceUID": "1.3.6.1.4.1.14519.5.2.1.3023.4024.132599067175649997415524181333",
        "seriesInstanceUID": "1.3.6.1.4.1.14519.5.2.1.3023.4024.211827887399040258667895649501",
        "studyInstanceUID": "1.3.6.1.4.1.14519.5.2.1.3023.4024.215308722288168917637555384485",
        "points": {
            "center": {
                "x": 256,
                "y": 128
            },
            "radius": {
                "x": 50,
                "y": 30
            }
        },
        "label": "Ellipse Annotation"
    },
    {
        "type": "line",
        "id": "annotation2",
        "frameOfReferenceUID": "1.3.6.1.4.1.14519.5.2.1.3023.4024.231311529795221040217906484458",
        "sopInstanceUID": "1.3.6.1.4.1.14519.5.2.1.3023.4024.132599067175649997415524181333",
        "seriesInstanceUID": "1.3.6.1.4.1.14519.5.2.1.3023.4024.211827887399040258667895649501",
        "studyInstanceUID": "1.3.6.1.4.1.14519.5.2.1.3023.4024.215308722288168917637555384485",
        "points": {
            "start": {
                "x": 150,
                "y": 200
            },
            "end": {
                "x": 300,
                "y": 250
            }
        },
        "label": "Line Annotation"
    },
    {
        "type": "closedPath",
        "id": "annotation3",
        "frameOfReferenceUID": "1.3.6.1.4.1.14519.5.2.1.3023.4024.231311529795221040217906484458",
        "sopInstanceUID": "1.3.6.1.4.1.14519.5.2.1.3023.4024.132599067175649997415524181333",
        "seriesInstanceUID": "1.3.6.1.4.1.14519.5.2.1.3023.4024.211827887399040258667895649501",
        "studyInstanceUID": "1.3.6.1.4.1.14519.5.2.1.3023.4024.215308722288168917637555384485",
        "points": [
            {
                "x": 100,
                "y": 150
            },
            {
                "x": 120,
                "y": 180
            },
            {
                "x": 140,
                "y": 170
            },
            {
                "x": 130,
                "y": 140
            }
        ],
        "label": "Closed Path Annotation"
    },
    {
        "type": "text",
        "id": "annotation4",
        "frameOfReferenceUID": "1.3.6.1.4.1.14519.5.2.1.3023.4024.231311529795221040217906484458",
        "sopInstanceUID": "1.3.6.1.4.1.14519.5.2.1.3023.4024.132599067175649997415524181333",
        "seriesInstanceUID": "1.3.6.1.4.1.14519.5.2.1.3023.4024.211827887399040258667895649501",
        "studyInstanceUID": "1.3.6.1.4.1.14519.5.2.1.3023.4024.215308722288168917637555384485",
        "point": {
            "x": 350,
            "y": 300
        },
        "text": "This is a text annotation"
    }
]
    ;

const rsvAnnotationsExtension = {
    id: 'rsvAnnotationsExtension',
    waitingForViewport: false,
    async onModeEnter({ servicesManager, extensionManager }) {
        // Load JSON annotations from the external server
        try {
            const annotations = await rsvAnnotationsExtension.fetchAnnotationsFromServer();
            const { MeasurementService, ViewportGridService } = servicesManager.services;

            // Register the measurement source if it doesn't exist
            let source = MeasurementService.getSource('cornerstone');
            if (!source) {
                source = MeasurementService.createSource('cornerstone', {
                    name: 'Cornerstone Tools',
                    version: '1.0',
                    measurementSourceMappings: [
                        {
                            measurementType: 'Length',
                            schema: {
                                id: 'Length',
                                displayText: 'Length Measurement',
                                points: ['start', 'end'],
                            },
                        },
                        {
                            measurementType: 'EllipticalRoi',
                            schema: {
                                id: 'EllipticalRoi',
                                displayText: 'Ellipse Measurement',
                                points: ['center', 'radius'],
                            },
                        },
                        {
                            measurementType: 'ClosedPolyline',
                            schema: {
                                id: 'ClosedPolyline',
                                displayText: 'Closed Path',
                                points: ['vertices'],
                            },
                        },
                        {
                            measurementType: 'TextMarker',
                            schema: {
                                id: 'TextMarker',
                                displayText: 'Text Annotation',
                                points: ['position'],
                            },
                        },
                    ],
                });
            }

            // Wait for the active viewport to be available
            if (!rsvAnnotationsExtension.waitingForViewport) {
                rsvAnnotationsExtension.waitingForViewport = true;
                //ViewportGridService.subscribe(ViewportGridService.EVENTS.VIEWPORT_ADDED, () => {
                setTimeout(()=>{
                    const viewportGrid = ViewportGridService.getState();
                    const { viewports } = viewportGrid;
                    if (viewports && viewports.size > 0) {
                        rsvAnnotationsExtension.addAnnotationsToMeasurementService(annotations, MeasurementService, source);
                        rsvAnnotationsExtension.waitingForViewport = false;
                    }
                },1000);
            }
        } catch (error) {
            console.error('Failed to load annotations from server:', error);
        }
    },

    async fetchAnnotationsFromServer() {
        return new Promise((resolve, reject) => {resolve(data)});
    },

    addAnnotationsToMeasurementService(annotations, MeasurementService, source) {
        if (!annotations || annotations.length === 0) {
            console.error('No annotations available to add.');
            return;
        }

        try {
            const definition = {
                id: 'cornerstone-tools',
                name: 'Cornerstone Tools',
                version: '1.0',
            };

            annotations.forEach(annotation => {
                const data = {
                    measurementType: annotation.type,
                    referenceSeriesInstanceUID: annotation.seriesInstanceUID,
                    referenceSopInstanceUID: annotation.sopInstanceUID,
                    frameOfReferenceUID: annotation.frameOfReferenceUID,
                    points: annotation.points,
                    labels: annotation.labels || [],
                };

                const toMeasurementSchema = rawData => {
                    return {
                        id: rawData.id,
                        sopInstanceUID: rawData.referenceSopInstanceUID,
                        frameOfReferenceUID: rawData.frameOfReferenceUID,
                        points: rawData.points,
                        labels: rawData.labels,
                        measurementType: rawData.measurementType,
                    };
                };

                MeasurementService.addRawMeasurement(source, definition, data, toMeasurementSchema);
            });
        } catch (error) {
            console.error('Failed to add annotations to MeasurementService:', error);
        }
    }
};

export default rsvAnnotationsExtension;
